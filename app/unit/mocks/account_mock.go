// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/account.go
//
// Generated by this command:
//
//	mockgen -source=../domain/account.go -destination=../unit/mocks/account_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "app/domain"
	context "context"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountRepo is a mock of IAccountRepo interface.
type MockIAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepoMockRecorder
}

// MockIAccountRepoMockRecorder is the mock recorder for MockIAccountRepo.
type MockIAccountRepoMockRecorder struct {
	mock *MockIAccountRepo
}

// NewMockIAccountRepo creates a new mock instance.
func NewMockIAccountRepo(ctrl *gomock.Controller) *MockIAccountRepo {
	mock := &MockIAccountRepo{ctrl: ctrl}
	mock.recorder = &MockIAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepo) EXPECT() *MockIAccountRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIAccountRepo) Add(c context.Context, acc *domain.Account, newAccDTO *domain.NewAccountDTO, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c, acc, newAccDTO, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIAccountRepoMockRecorder) Add(c, acc, newAccDTO, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIAccountRepo)(nil).Add), c, acc, newAccDTO, lg)
}

// AddClient mocks base method.
func (m *MockIAccountRepo) AddClient(c context.Context, dto *domain.NewAccountDTO, lg *logrus.Logger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", c, dto, lg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClient indicates an expected call of AddClient.
func (mr *MockIAccountRepoMockRecorder) AddClient(c, dto, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockIAccountRepo)(nil).AddClient), c, dto, lg)
}

// AddManager mocks base method.
func (m *MockIAccountRepo) AddManager(c context.Context, dto *domain.NewAccountDTO, lg *logrus.Logger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddManager", c, dto, lg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddManager indicates an expected call of AddManager.
func (mr *MockIAccountRepoMockRecorder) AddManager(c, dto, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManager", reflect.TypeOf((*MockIAccountRepo)(nil).AddManager), c, dto, lg)
}

// Delete mocks base method.
func (m *MockIAccountRepo) Delete(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIAccountRepoMockRecorder) Delete(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAccountRepo)(nil).Delete), c, id, lg)
}

// GetByLogin mocks base method.
func (m *MockIAccountRepo) GetByLogin(c context.Context, login string, lg *logrus.Logger) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", c, login, lg)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockIAccountRepoMockRecorder) GetByLogin(c, login, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIAccountRepo)(nil).GetByLogin), c, login, lg)
}

// GetClientById mocks base method.
func (m *MockIAccountRepo) GetClientById(c context.Context, accId int, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientById", c, accId, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientById indicates an expected call of GetClientById.
func (mr *MockIAccountRepoMockRecorder) GetClientById(c, accId, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientById", reflect.TypeOf((*MockIAccountRepo)(nil).GetClientById), c, accId, lg)
}

// GetManagerById mocks base method.
func (m *MockIAccountRepo) GetManagerById(c context.Context, accId int, lg *logrus.Logger) (domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerById", c, accId, lg)
	ret0, _ := ret[0].(domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerById indicates an expected call of GetManagerById.
func (mr *MockIAccountRepoMockRecorder) GetManagerById(c, accId, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerById", reflect.TypeOf((*MockIAccountRepo)(nil).GetManagerById), c, accId, lg)
}

// MockIAccountService is a mock of IAccountService interface.
type MockIAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountServiceMockRecorder
}

// MockIAccountServiceMockRecorder is the mock recorder for MockIAccountService.
type MockIAccountServiceMockRecorder struct {
	mock *MockIAccountService
}

// NewMockIAccountService creates a new mock instance.
func NewMockIAccountService(ctrl *gomock.Controller) *MockIAccountService {
	mock := &MockIAccountService{ctrl: ctrl}
	mock.recorder = &MockIAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountService) EXPECT() *MockIAccountServiceMockRecorder {
	return m.recorder
}

// GetByLogin mocks base method.
func (m *MockIAccountService) GetByLogin(login string, lg *logrus.Logger) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login, lg)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockIAccountServiceMockRecorder) GetByLogin(login, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIAccountService)(nil).GetByLogin), login, lg)
}

// GetClientById mocks base method.
func (m *MockIAccountService) GetClientById(id int, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientById", id, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientById indicates an expected call of GetClientById.
func (mr *MockIAccountServiceMockRecorder) GetClientById(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientById", reflect.TypeOf((*MockIAccountService)(nil).GetClientById), id, lg)
}

// GetManagerById mocks base method.
func (m *MockIAccountService) GetManagerById(id int, lg *logrus.Logger) (domain.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerById", id, lg)
	ret0, _ := ret[0].(domain.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerById indicates an expected call of GetManagerById.
func (mr *MockIAccountServiceMockRecorder) GetManagerById(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerById", reflect.TypeOf((*MockIAccountService)(nil).GetManagerById), id, lg)
}

// Login mocks base method.
func (m *MockIAccountService) Login(acc *domain.Account, role string, lg *logrus.Logger) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", acc, role, lg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIAccountServiceMockRecorder) Login(acc, role, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAccountService)(nil).Login), acc, role, lg)
}

// Register mocks base method.
func (m *MockIAccountService) Register(acc *domain.Account, newAccDTO *domain.NewAccountDTO, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", acc, newAccDTO, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockIAccountServiceMockRecorder) Register(acc, newAccDTO, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAccountService)(nil).Register), acc, newAccDTO, lg)
}
