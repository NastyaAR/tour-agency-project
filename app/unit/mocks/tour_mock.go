// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/tour.go
//
// Generated by this command:
//
//	mockgen -source=../domain/tour.go -destination=./tour_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "app/domain"
	context "context"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockITourRepo is a mock of ITourRepo interface.
type MockITourRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITourRepoMockRecorder
}

// MockITourRepoMockRecorder is the mock recorder for MockITourRepo.
type MockITourRepoMockRecorder struct {
	mock *MockITourRepo
}

// NewMockITourRepo creates a new mock instance.
func NewMockITourRepo(ctrl *gomock.Controller) *MockITourRepo {
	mock := &MockITourRepo{ctrl: ctrl}
	mock.recorder = &MockITourRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITourRepo) EXPECT() *MockITourRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockITourRepo) Add(c context.Context, tour *domain.Tour, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c, tour, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockITourRepoMockRecorder) Add(c, tour, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockITourRepo)(nil).Add), c, tour, lg)
}

// Delete mocks base method.
func (m *MockITourRepo) Delete(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITourRepoMockRecorder) Delete(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITourRepo)(nil).Delete), c, id, lg)
}

// GetByCriteria mocks base method.
func (m *MockITourRepo) GetByCriteria(c context.Context, offset, limit int, criteria *domain.Tour, lg *logrus.Logger) ([]domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCriteria", c, offset, limit, criteria, lg)
	ret0, _ := ret[0].([]domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCriteria indicates an expected call of GetByCriteria.
func (mr *MockITourRepoMockRecorder) GetByCriteria(c, offset, limit, criteria, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCriteria", reflect.TypeOf((*MockITourRepo)(nil).GetByCriteria), c, offset, limit, criteria, lg)
}

// GetById mocks base method.
func (m *MockITourRepo) GetById(c context.Context, id int, lg *logrus.Logger) (domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", c, id, lg)
	ret0, _ := ret[0].(domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockITourRepoMockRecorder) GetById(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockITourRepo)(nil).GetById), c, id, lg)
}

// GetHotTours mocks base method.
func (m *MockITourRepo) GetHotTours(c context.Context, offset, limit int, lg *logrus.Logger) ([]domain.HotTourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotTours", c, offset, limit, lg)
	ret0, _ := ret[0].([]domain.HotTourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotTours indicates an expected call of GetHotTours.
func (mr *MockITourRepoMockRecorder) GetHotTours(c, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotTours", reflect.TypeOf((*MockITourRepo)(nil).GetHotTours), c, offset, limit, lg)
}

// GetLimit mocks base method.
func (m *MockITourRepo) GetLimit(c context.Context, offset, limit int, lg *logrus.Logger) ([]domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", c, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimit indicates an expected call of GetLimit.
func (mr *MockITourRepoMockRecorder) GetLimit(c, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MockITourRepo)(nil).GetLimit), c, offset, limit, lg)
}

// Update mocks base method.
func (m *MockITourRepo) Update(c context.Context, id int, newState *domain.Tour, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, newState, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITourRepoMockRecorder) Update(c, id, newState, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITourRepo)(nil).Update), c, id, newState, lg)
}

// UpdateSale mocks base method.
func (m *MockITourRepo) UpdateSale(c context.Context, id int, newSale *domain.Sale, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSale", c, id, newSale, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSale indicates an expected call of UpdateSale.
func (mr *MockITourRepoMockRecorder) UpdateSale(c, id, newSale, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSale", reflect.TypeOf((*MockITourRepo)(nil).UpdateSale), c, id, newSale, lg)
}

// MockITourService is a mock of ITourService interface.
type MockITourService struct {
	ctrl     *gomock.Controller
	recorder *MockITourServiceMockRecorder
}

// MockITourServiceMockRecorder is the mock recorder for MockITourService.
type MockITourServiceMockRecorder struct {
	mock *MockITourService
}

// NewMockITourService creates a new mock instance.
func NewMockITourService(ctrl *gomock.Controller) *MockITourService {
	mock := &MockITourService{ctrl: ctrl}
	mock.recorder = &MockITourServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITourService) EXPECT() *MockITourServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITourService) Create(tour *domain.Tour, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tour, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITourServiceMockRecorder) Create(tour, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITourService)(nil).Create), tour, lg)
}

// Delete mocks base method.
func (m *MockITourService) Delete(id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITourServiceMockRecorder) Delete(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITourService)(nil).Delete), id, lg)
}

// GetByCriteria mocks base method.
func (m *MockITourService) GetByCriteria(criteria *domain.Tour, offset, limit int, lg *logrus.Logger) ([]domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCriteria", criteria, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCriteria indicates an expected call of GetByCriteria.
func (mr *MockITourServiceMockRecorder) GetByCriteria(criteria, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCriteria", reflect.TypeOf((*MockITourService)(nil).GetByCriteria), criteria, offset, limit, lg)
}

// GetById mocks base method.
func (m *MockITourService) GetById(id int, lg *logrus.Logger) (domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, lg)
	ret0, _ := ret[0].(domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockITourServiceMockRecorder) GetById(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockITourService)(nil).GetById), id, lg)
}

// GetHotTours mocks base method.
func (m *MockITourService) GetHotTours(offset, limit int, lg *logrus.Logger) ([]domain.HotTourDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotTours", offset, limit, lg)
	ret0, _ := ret[0].([]domain.HotTourDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotTours indicates an expected call of GetHotTours.
func (mr *MockITourServiceMockRecorder) GetHotTours(offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotTours", reflect.TypeOf((*MockITourService)(nil).GetHotTours), offset, limit, lg)
}

// GetTours mocks base method.
func (m *MockITourService) GetTours(offset, limit int, lg *logrus.Logger) ([]domain.Tour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTours", offset, limit, lg)
	ret0, _ := ret[0].([]domain.Tour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTours indicates an expected call of GetTours.
func (mr *MockITourServiceMockRecorder) GetTours(offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTours", reflect.TypeOf((*MockITourService)(nil).GetTours), offset, limit, lg)
}

// SetSale mocks base method.
func (m *MockITourService) SetSale(id int, newSale *domain.Sale, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSale", id, newSale, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSale indicates an expected call of SetSale.
func (mr *MockITourServiceMockRecorder) SetSale(id, newSale, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSale", reflect.TypeOf((*MockITourService)(nil).SetSale), id, newSale, lg)
}

// Update mocks base method.
func (m *MockITourService) Update(id int, newState *domain.Tour, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, newState, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITourServiceMockRecorder) Update(id, newState, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITourService)(nil).Update), id, newState, lg)
}
