// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/request.go
//
// Generated by this command:
//
//	mockgen -source=../domain/request.go -destination=../unit/mocks/request_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "app/domain"
	context "context"
	reflect "reflect"
	time "time"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockIRequestRepo is a mock of IRequestRepo interface.
type MockIRequestRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestRepoMockRecorder
}

// MockIRequestRepoMockRecorder is the mock recorder for MockIRequestRepo.
type MockIRequestRepoMockRecorder struct {
	mock *MockIRequestRepo
}

// NewMockIRequestRepo creates a new mock instance.
func NewMockIRequestRepo(ctrl *gomock.Controller) *MockIRequestRepo {
	mock := &MockIRequestRepo{ctrl: ctrl}
	mock.recorder = &MockIRequestRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequestRepo) EXPECT() *MockIRequestRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIRequestRepo) Add(c context.Context, req *domain.Request, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c, req, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIRequestRepoMockRecorder) Add(c, req, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIRequestRepo)(nil).Add), c, req, lg)
}

// AddTour mocks base method.
func (m *MockIRequestRepo) AddTour(c context.Context, id, tour_id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTour", c, id, tour_id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTour indicates an expected call of AddTour.
func (mr *MockIRequestRepoMockRecorder) AddTour(c, id, tour_id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTour", reflect.TypeOf((*MockIRequestRepo)(nil).AddTour), c, id, tour_id, lg)
}

// Approve mocks base method.
func (m *MockIRequestRepo) Approve(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockIRequestRepoMockRecorder) Approve(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockIRequestRepo)(nil).Approve), c, id, lg)
}

// AtomicPay mocks base method.
func (m *MockIRequestRepo) AtomicPay(c context.Context, finalCost int, req *domain.Request, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtomicPay", c, finalCost, req, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtomicPay indicates an expected call of AtomicPay.
func (mr *MockIRequestRepoMockRecorder) AtomicPay(c, finalCost, req, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicPay", reflect.TypeOf((*MockIRequestRepo)(nil).AtomicPay), c, finalCost, req, lg)
}

// CountFinalCost mocks base method.
func (m *MockIRequestRepo) CountFinalCost(c context.Context, id int, lg *logrus.Logger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFinalCost", c, id, lg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFinalCost indicates an expected call of CountFinalCost.
func (mr *MockIRequestRepoMockRecorder) CountFinalCost(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFinalCost", reflect.TypeOf((*MockIRequestRepo)(nil).CountFinalCost), c, id, lg)
}

// GetById mocks base method.
func (m *MockIRequestRepo) GetById(c context.Context, id int, lg *logrus.Logger) (domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", c, id, lg)
	ret0, _ := ret[0].(domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRequestRepoMockRecorder) GetById(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRequestRepo)(nil).GetById), c, id, lg)
}

// GetByStatus mocks base method.
func (m *MockIRequestRepo) GetByStatus(c context.Context, status string, offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", c, status, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockIRequestRepoMockRecorder) GetByStatus(c, status, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockIRequestRepo)(nil).GetByStatus), c, status, offset, limit, lg)
}

// GetLimit mocks base method.
func (m *MockIRequestRepo) GetLimit(c context.Context, offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", c, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimit indicates an expected call of GetLimit.
func (mr *MockIRequestRepoMockRecorder) GetLimit(c, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MockIRequestRepo)(nil).GetLimit), c, offset, limit, lg)
}

// GetNonSendEvents mocks base method.
func (m *MockIRequestRepo) GetNonSendEvents(c context.Context, limit int, lg *logrus.Logger) ([]domain.PayEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonSendEvents", c, limit, lg)
	ret0, _ := ret[0].([]domain.PayEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonSendEvents indicates an expected call of GetNonSendEvents.
func (mr *MockIRequestRepoMockRecorder) GetNonSendEvents(c, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonSendEvents", reflect.TypeOf((*MockIRequestRepo)(nil).GetNonSendEvents), c, limit, lg)
}

// GetRequestsForClient mocks base method.
func (m *MockIRequestRepo) GetRequestsForClient(c context.Context, clnt_id, offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsForClient", c, clnt_id, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsForClient indicates an expected call of GetRequestsForClient.
func (mr *MockIRequestRepoMockRecorder) GetRequestsForClient(c, clnt_id, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsForClient", reflect.TypeOf((*MockIRequestRepo)(nil).GetRequestsForClient), c, clnt_id, offset, limit, lg)
}

// Reject mocks base method.
func (m *MockIRequestRepo) Reject(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockIRequestRepoMockRecorder) Reject(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIRequestRepo)(nil).Reject), c, id, lg)
}

// Update mocks base method.
func (m *MockIRequestRepo) Update(c context.Context, id int, reqCriteria *domain.Request, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, reqCriteria, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRequestRepoMockRecorder) Update(c, id, reqCriteria, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRequestRepo)(nil).Update), c, id, reqCriteria, lg)
}

// UpdateOutbox mocks base method.
func (m *MockIRequestRepo) UpdateOutbox(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutbox", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutbox indicates an expected call of UpdateOutbox.
func (mr *MockIRequestRepoMockRecorder) UpdateOutbox(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutbox", reflect.TypeOf((*MockIRequestRepo)(nil).UpdateOutbox), c, id, lg)
}

// MockIRequestService is a mock of IRequestService interface.
type MockIRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestServiceMockRecorder
}

// MockIRequestServiceMockRecorder is the mock recorder for MockIRequestService.
type MockIRequestServiceMockRecorder struct {
	mock *MockIRequestService
}

// NewMockIRequestService creates a new mock instance.
func NewMockIRequestService(ctrl *gomock.Controller) *MockIRequestService {
	mock := &MockIRequestService{ctrl: ctrl}
	mock.recorder = &MockIRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequestService) EXPECT() *MockIRequestServiceMockRecorder {
	return m.recorder
}

// AddTour mocks base method.
func (m *MockIRequestService) AddTour(id, tour_id, mngr_id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTour", id, tour_id, mngr_id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTour indicates an expected call of AddTour.
func (mr *MockIRequestServiceMockRecorder) AddTour(id, tour_id, mngr_id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTour", reflect.TypeOf((*MockIRequestService)(nil).AddTour), id, tour_id, mngr_id, lg)
}

// Approve mocks base method.
func (m *MockIRequestService) Approve(id, mngr_id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", id, mngr_id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockIRequestServiceMockRecorder) Approve(id, mngr_id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockIRequestService)(nil).Approve), id, mngr_id, lg)
}

// Create mocks base method.
func (m *MockIRequestService) Create(req *domain.Request, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRequestServiceMockRecorder) Create(req, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRequestService)(nil).Create), req, lg)
}

// GetById mocks base method.
func (m *MockIRequestService) GetById(id int, lg *logrus.Logger) (domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, lg)
	ret0, _ := ret[0].(domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRequestServiceMockRecorder) GetById(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRequestService)(nil).GetById), id, lg)
}

// GetByStatus mocks base method.
func (m *MockIRequestService) GetByStatus(status string, offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockIRequestServiceMockRecorder) GetByStatus(status, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockIRequestService)(nil).GetByStatus), status, offset, limit, lg)
}

// GetRequests mocks base method.
func (m *MockIRequestService) GetRequests(offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockIRequestServiceMockRecorder) GetRequests(offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockIRequestService)(nil).GetRequests), offset, limit, lg)
}

// GetRequestsForClient mocks base method.
func (m *MockIRequestService) GetRequestsForClient(clnt_id, offset, limit int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsForClient", clnt_id, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsForClient indicates an expected call of GetRequestsForClient.
func (mr *MockIRequestServiceMockRecorder) GetRequestsForClient(clnt_id, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsForClient", reflect.TypeOf((*MockIRequestService)(nil).GetRequestsForClient), clnt_id, offset, limit, lg)
}

// Pay mocks base method.
func (m *MockIRequestService) Pay(id, clnt_id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", id, clnt_id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pay indicates an expected call of Pay.
func (mr *MockIRequestServiceMockRecorder) Pay(id, clnt_id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockIRequestService)(nil).Pay), id, clnt_id, lg)
}

// Paying mocks base method.
func (m *MockIRequestService) Paying(done chan bool, frequency time.Duration, lg *logrus.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Paying", done, frequency, lg)
}

// Paying indicates an expected call of Paying.
func (mr *MockIRequestServiceMockRecorder) Paying(done, frequency, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paying", reflect.TypeOf((*MockIRequestService)(nil).Paying), done, frequency, lg)
}

// Reject mocks base method.
func (m *MockIRequestService) Reject(id, mngr_id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", id, mngr_id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockIRequestServiceMockRecorder) Reject(id, mngr_id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIRequestService)(nil).Reject), id, mngr_id, lg)
}

// Update mocks base method.
func (m *MockIRequestService) Update(id int, newState *domain.Request, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, newState, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRequestServiceMockRecorder) Update(id, newState, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRequestService)(nil).Update), id, newState, lg)
}
