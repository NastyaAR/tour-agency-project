// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/pay.go
//
// Generated by this command:
//
//	mockgen -source=../domain/pay.go -destination=../unit/mocks/pay_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "app/domain"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockIPayAdapter is a mock of IPayAdapter interface.
type MockIPayAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIPayAdapterMockRecorder
}

// MockIPayAdapterMockRecorder is the mock recorder for MockIPayAdapter.
type MockIPayAdapterMockRecorder struct {
	mock *MockIPayAdapter
}

// NewMockIPayAdapter creates a new mock instance.
func NewMockIPayAdapter(ctrl *gomock.Controller) *MockIPayAdapter {
	mock := &MockIPayAdapter{ctrl: ctrl}
	mock.recorder = &MockIPayAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayAdapter) EXPECT() *MockIPayAdapterMockRecorder {
	return m.recorder
}

// SendPaymentRequest mocks base method.
func (m *MockIPayAdapter) SendPaymentRequest(pay *domain.PayEvent, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentRequest", pay, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPaymentRequest indicates an expected call of SendPaymentRequest.
func (mr *MockIPayAdapterMockRecorder) SendPaymentRequest(pay, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentRequest", reflect.TypeOf((*MockIPayAdapter)(nil).SendPaymentRequest), pay, lg)
}
