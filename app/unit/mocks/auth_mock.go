// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/auth.go
//
// Generated by this command:
//
//	mockgen -source=../domain/auth.go -destination=../unit/mocks/auth_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockIAuthService) AddToken(login, token string, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", login, token, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockIAuthServiceMockRecorder) AddToken(login, token, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockIAuthService)(nil).AddToken), login, token, lg)
}

// CheckAccessRights mocks base method.
func (m *MockIAuthService) CheckAccessRights(token, needRoleLevel string, lg *logrus.Logger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccessRights", token, needRoleLevel, lg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccessRights indicates an expected call of CheckAccessRights.
func (mr *MockIAuthServiceMockRecorder) CheckAccessRights(token, needRoleLevel, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccessRights", reflect.TypeOf((*MockIAuthService)(nil).CheckAccessRights), token, needRoleLevel, lg)
}

// ExtractIdFromToken mocks base method.
func (m *MockIAuthService) ExtractIdFromToken(tokenString string, lg *logrus.Logger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractIdFromToken", tokenString, lg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractIdFromToken indicates an expected call of ExtractIdFromToken.
func (mr *MockIAuthServiceMockRecorder) ExtractIdFromToken(tokenString, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractIdFromToken", reflect.TypeOf((*MockIAuthService)(nil).ExtractIdFromToken), tokenString, lg)
}

// GetToken mocks base method.
func (m *MockIAuthService) GetToken(login string, lg *logrus.Logger) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", login, lg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIAuthServiceMockRecorder) GetToken(login, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIAuthService)(nil).GetToken), login, lg)
}

// MockIAuthRepo is a mock of IAuthRepo interface.
type MockIAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepoMockRecorder
}

// MockIAuthRepoMockRecorder is the mock recorder for MockIAuthRepo.
type MockIAuthRepoMockRecorder struct {
	mock *MockIAuthRepo
}

// NewMockIAuthRepo creates a new mock instance.
func NewMockIAuthRepo(ctrl *gomock.Controller) *MockIAuthRepo {
	mock := &MockIAuthRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepo) EXPECT() *MockIAuthRepoMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockIAuthRepo) AddToken(c context.Context, login, token string, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", c, login, token, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockIAuthRepoMockRecorder) AddToken(c, login, token, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockIAuthRepo)(nil).AddToken), c, login, token, lg)
}

// GetToken mocks base method.
func (m *MockIAuthRepo) GetToken(c context.Context, login string, lg *logrus.Logger) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", c, login, lg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIAuthRepoMockRecorder) GetToken(c, login, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIAuthRepo)(nil).GetToken), c, login, lg)
}
