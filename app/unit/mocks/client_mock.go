// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/client.go
//
// Generated by this command:
//
//	mockgen -source=../domain/client.go -destination=../unit/mocks/client_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "app/domain"
	context "context"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockIClientRepo is a mock of IClientRepo interface.
type MockIClientRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIClientRepoMockRecorder
}

// MockIClientRepoMockRecorder is the mock recorder for MockIClientRepo.
type MockIClientRepoMockRecorder struct {
	mock *MockIClientRepo
}

// NewMockIClientRepo creates a new mock instance.
func NewMockIClientRepo(ctrl *gomock.Controller) *MockIClientRepo {
	mock := &MockIClientRepo{ctrl: ctrl}
	mock.recorder = &MockIClientRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientRepo) EXPECT() *MockIClientRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIClientRepo) Add(c context.Context, clnt *domain.Client, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", c, clnt, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIClientRepoMockRecorder) Add(c, clnt, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIClientRepo)(nil).Add), c, clnt, lg)
}

// Delete mocks base method.
func (m *MockIClientRepo) Delete(c context.Context, id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIClientRepoMockRecorder) Delete(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIClientRepo)(nil).Delete), c, id, lg)
}

// GetActiveRequestsByID mocks base method.
func (m *MockIClientRepo) GetActiveRequestsByID(c context.Context, id int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRequestsByID", c, id, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRequestsByID indicates an expected call of GetActiveRequestsByID.
func (mr *MockIClientRepoMockRecorder) GetActiveRequestsByID(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRequestsByID", reflect.TypeOf((*MockIClientRepo)(nil).GetActiveRequestsByID), c, id, lg)
}

// GetById mocks base method.
func (m *MockIClientRepo) GetById(c context.Context, id int, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", c, id, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIClientRepoMockRecorder) GetById(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIClientRepo)(nil).GetById), c, id, lg)
}

// GetByNameSurname mocks base method.
func (m *MockIClientRepo) GetByNameSurname(c context.Context, name, surname string, lg *logrus.Logger) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameSurname", c, name, surname, lg)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameSurname indicates an expected call of GetByNameSurname.
func (mr *MockIClientRepoMockRecorder) GetByNameSurname(c, name, surname, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameSurname", reflect.TypeOf((*MockIClientRepo)(nil).GetByNameSurname), c, name, surname, lg)
}

// GetByPhone mocks base method.
func (m *MockIClientRepo) GetByPhone(c context.Context, phone string, lg *logrus.Logger) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", c, phone, lg)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockIClientRepoMockRecorder) GetByPhone(c, phone, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockIClientRepo)(nil).GetByPhone), c, phone, lg)
}

// GetDoneRequestsByID mocks base method.
func (m *MockIClientRepo) GetDoneRequestsByID(c context.Context, id int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoneRequestsByID", c, id, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoneRequestsByID indicates an expected call of GetDoneRequestsByID.
func (mr *MockIClientRepoMockRecorder) GetDoneRequestsByID(c, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoneRequestsByID", reflect.TypeOf((*MockIClientRepo)(nil).GetDoneRequestsByID), c, id, lg)
}

// Update mocks base method.
func (m *MockIClientRepo) Update(c context.Context, id int, newState *domain.Client, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, newState, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIClientRepoMockRecorder) Update(c, id, newState, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIClientRepo)(nil).Update), c, id, newState, lg)
}

// MockIClientService is a mock of IClientService interface.
type MockIClientService struct {
	ctrl     *gomock.Controller
	recorder *MockIClientServiceMockRecorder
}

// MockIClientServiceMockRecorder is the mock recorder for MockIClientService.
type MockIClientServiceMockRecorder struct {
	mock *MockIClientService
}

// NewMockIClientService creates a new mock instance.
func NewMockIClientService(ctrl *gomock.Controller) *MockIClientService {
	mock := &MockIClientService{ctrl: ctrl}
	mock.recorder = &MockIClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientService) EXPECT() *MockIClientServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIClientService) Create(clnt *domain.Client, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", clnt, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIClientServiceMockRecorder) Create(clnt, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIClientService)(nil).Create), clnt, lg)
}

// Delete mocks base method.
func (m *MockIClientService) Delete(id int, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIClientServiceMockRecorder) Delete(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIClientService)(nil).Delete), id, lg)
}

// GetById mocks base method.
func (m *MockIClientService) GetById(id int, lg *logrus.Logger) (domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, lg)
	ret0, _ := ret[0].(domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIClientServiceMockRecorder) GetById(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIClientService)(nil).GetById), id, lg)
}

// GetByNameSurname mocks base method.
func (m *MockIClientService) GetByNameSurname(name, surname string, lg *logrus.Logger) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameSurname", name, surname, lg)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameSurname indicates an expected call of GetByNameSurname.
func (mr *MockIClientServiceMockRecorder) GetByNameSurname(name, surname, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameSurname", reflect.TypeOf((*MockIClientService)(nil).GetByNameSurname), name, surname, lg)
}

// GetByPhone mocks base method.
func (m *MockIClientService) GetByPhone(phone string, lg *logrus.Logger) ([]domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", phone, lg)
	ret0, _ := ret[0].([]domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockIClientServiceMockRecorder) GetByPhone(phone, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockIClientService)(nil).GetByPhone), phone, lg)
}

// GetStoryOfRequests mocks base method.
func (m *MockIClientService) GetStoryOfRequests(id int, lg *logrus.Logger) ([]domain.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoryOfRequests", id, lg)
	ret0, _ := ret[0].([]domain.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoryOfRequests indicates an expected call of GetStoryOfRequests.
func (mr *MockIClientServiceMockRecorder) GetStoryOfRequests(id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoryOfRequests", reflect.TypeOf((*MockIClientService)(nil).GetStoryOfRequests), id, lg)
}

// Update mocks base method.
func (m *MockIClientService) Update(id int, newState *domain.Client, lg *logrus.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, newState, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIClientServiceMockRecorder) Update(id, newState, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIClientService)(nil).Update), id, newState, lg)
}
